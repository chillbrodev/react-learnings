{"version":3,"sources":["Number.js","Timer.js","Game.js","App.js","serviceWorker.js","index.js"],"names":["Number","handleClick","_this","props","clickable","onClick","id","react_default","a","createElement","className","style","opacity","this","value","PureComponent","Timer","Component","randomNumberBetween","min","max","random","Math","floor","Game","state","gameStatus","gameStatusEnum","new","remainingSeconds","initialSeconds","selectedIds","challengeNumbers","Array","from","length","challengeSize","map","apply","Object","toConsumableArray","challengeRange","target","sum","sampleSize","answerSize","isNumberAvailable","numberIndex","indexOf","startGame","setState","playing","intervalId","setInterval","prevState","newRemainingSeconds","clearInterval","lost","selectNumber","newSelectedIds","concat","currSum","reduce","acc","curr","calcGameStatus","currentSum","sumSelected","won","autoPlay","_this2","_this$state","backgroundColor","bgColors","index","src_Number","key","src_Timer","includes","onPlayAgain","getColorFromStatus","App","gameId","resetGame","src_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4253ce75.chunk.js","sourcesContent":["import React, { PureComponent } from 'react'\n\nclass Number extends PureComponent {\n  handleClick = () => {\n    if (this.props.clickable) {\n      this.props.onClick(this.props.id)\n    }\n  }\n\n  render() {\n    return (\n      <div\n        className='number'\n        style={{ opacity: this.props.clickable ? 1 : 0.3 }}\n        onClick={this.handleClick}\n      >\n        {this.props.value}\n      </div>\n    )\n  }\n}\n\nexport default Number\n","import React, { Component } from 'react'\n\nclass Timer extends Component {\n  render() {\n    return <div className='timer-value'>{this.props.value}</div>\n  }\n}\n\nexport default Timer\n","import React, { Component } from 'react'\nimport './App.css'\nimport Number from './Number'\n\nimport Timer from './Timer'\nimport { sampleSize, sum } from 'lodash'\n// Created via https://medium.freecodecamp.org/do-you-want-to-learn-more-about-react-lets-build-and-then-play-a-game-218e0da5be44\nconst randomNumberBetween = (min, max) => {\n  const random = Math.random()\n  return Math.floor(random * (max - min) + min)\n}\n\nclass Game extends Component {\n  static bgColors = {\n    new: 'lightblue',\n    playing: 'deepskyblue',\n    won: 'lightgreen',\n    lost: 'lightcoral'\n  }\n\n  static gameStatusEnum = {\n    new: 'new',\n    won: 'won',\n    playing: 'playing',\n    lost: 'lost'\n  }\n\n  static getColorFromStatus = () => Game.bgColors[this.state.gameStatus]\n\n  state = {\n    gameStatus: Game.gameStatusEnum.new, //new, playing, won, lost\n    remainingSeconds: this.props.initialSeconds,\n    selectedIds: []\n  }\n\n  challengeNumbers = Array.from({ length: this.props.challengeSize }).map(() =>\n    randomNumberBetween(...this.props.challengeRange)\n  )\n\n  target = sum(sampleSize(this.challengeNumbers, this.props.answerSize))\n\n  componentDidMount() {\n    if (this.props.autoPlay) {\n      this.startGame()\n    }\n  }\n\n  isNumberAvailable = numberIndex =>\n    this.state.selectedIds.indexOf(numberIndex) === -1\n\n  startGame = () => {\n    this.setState({ gameStatus: Game.gameStatusEnum.playing }, () => {\n      this.intervalId = setInterval(() => {\n        this.setState(prevState => {\n          const newRemainingSeconds = prevState.remainingSeconds - 1\n          if (newRemainingSeconds === 0) {\n            clearInterval(this.intervalId)\n            return { gameStatus: Game.gameStatusEnum.lost, remainingSeconds: 0 }\n          }\n          return { remainingSeconds: newRemainingSeconds }\n        })\n      }, 1000)\n    })\n  }\n\n  selectNumber = numberIndex => {\n    this.setState(\n      prevState => {\n        if (prevState.gameStatus !== Game.gameStatusEnum.playing) {\n          return null\n        }\n        const newSelectedIds = [...prevState.selectedIds, numberIndex]\n        const currSum = newSelectedIds.reduce(\n          (acc, curr) => acc + this.challengeNumbers[curr],\n          0\n        )\n        return {\n          selectedIds: newSelectedIds,\n          gameStatus: this.calcGameStatus(newSelectedIds),\n          currentSum: currSum\n        }\n      },\n      () => {\n        if (this.state.gameStatus !== Game.gameStatusEnum.playing) {\n          clearInterval(this.intervalId)\n        }\n      }\n    )\n  }\n\n  calcGameStatus = newSelectedIds => {\n    const sumSelected = newSelectedIds.reduce(\n      (acc, curr) => acc + this.challengeNumbers[curr],\n      0\n    )\n    if (newSelectedIds.length !== this.props.answerSize) {\n      return Game.gameStatusEnum.playing\n    }\n    return sumSelected === this.target\n      ? Game.gameStatusEnum.won\n      : Game.gameStatusEnum.lost\n  }\n\n  render() {\n    const { gameStatus, remainingSeconds, currentSum } = this.state\n\n    return (\n      <div className='game'>\n        <div className='help'>\n          Pick {this.props.answerSize} numbers that sum to the target in{' '}\n          {this.props.initialSeconds} seconds\n        </div>\n        Target Sum:\n        <div\n          className='target'\n          style={{ backgroundColor: Game.bgColors[gameStatus] }}\n        >\n          {gameStatus === Game.gameStatusEnum.new ? '?' : this.target}\n        </div>\n        Current Sum:\n        <div className='target'>{currentSum}</div>\n        <div className='challenge-numbers'>\n          {this.challengeNumbers.map((value, index) => (\n            <Number\n              key={index}\n              id={index}\n              value={\n                this.state.gameStatus === Game.gameStatusEnum.new ? '?' : value\n              }\n              clickable={this.isNumberAvailable(index)}\n              onClick={this.selectNumber}\n            />\n          ))}\n        </div>\n        <div className='footer'>\n          {gameStatus === Game.gameStatusEnum.new && (\n            <button onClick={this.startGame}>Start</button>\n          )}\n\n          {gameStatus === Game.gameStatusEnum.playing && (\n            <Timer value={remainingSeconds} />\n          )}\n\n          {[Game.gameStatusEnum.won, Game.gameStatusEnum.lost].includes(\n            gameStatus\n          ) && <button onClick={this.props.onPlayAgain}>Play Again</button>}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Game\n","import React, { Component } from 'react'\nimport Game from './Game'\n\nclass App extends Component {\n  state = {\n    gameId: 1\n  }\n\n  resetGame = () =>\n    this.setState(prevState => ({\n      gameId: prevState.gameId + 1\n    }))\n\n  render() {\n    return (\n      <Game\n        key={this.state.gameId}\n        autoPlay={this.state.gameId > 1}\n        challengeSize={6}\n        challengeRange={[2, 9]}\n        initialSeconds={10}\n        answerSize={4}\n        onPlayAgain={this.resetGame}\n      />\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}