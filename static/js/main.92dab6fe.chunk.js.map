{"version":3,"sources":["screens/Title.js","Number.js","Timer.js","screens/Game.js","utils/newId.js","utils/apiUrls.js","screens/Leaderboard.js","screens/Gameover.js","App.js","serviceWorker.js","index.js"],"names":["Title","react_default","a","createElement","className","onClick","this","props","showGameComponent","showLeaderboardComponent","Component","Number","handleClick","_this","clickable","id","style","opacity","value","PureComponent","Timer","randomNumberBetween","min","max","random","Math","floor","Game","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","gameStatus","gameStatusEnum","new","remainingSeconds","initialSeconds","selectedIds","currentSum","matchCount","streakCount","longestStreak","isNumberAvailable","numberIndex","indexOf","startGame","challengeNumbers","Array","from","length","challengeSize","map","apply","toConsumableArray","challengeRange","target","sum","sampleSize","answerSize","setState","playing","intervalId","setInterval","prevState","newRemainingSeconds","clearInterval","over","selectNumber","newSelectedIds","concat","currSum","reduce","acc","curr","calcGameStatus","newStreakCount","newMatchCount","newLongestStreak","match","console","log","miss","sumSelected","_this$state","gameOver","includes","streakColor","_this2","_this$state2","bgColors","streak","backgroundColor","src_Timer","color","index","src_Number","key","getColorFromStatus","lastId","newId","prefix","arguments","undefined","_dev","API_URLS","DEV","ALL_SCORES_API","SAVE_SCORE_API","Leaderboard","userScores","data","userName","score","axios","get","then","res","JSON","stringify","tableRows","filter","item","showTitleComponent","Gameover","handleUserNameChange","bind","assertThisInitialized","handleFormSubmit","event","finalScore","preventDefault","put","headers","Accept","catch","error","_this$props","gameScore","gameStreak","baseScore","type","onChange","App","displayGame","displayLeader","displayGameOver","showGameOverComponent","gameStreaks","screen","screens_Game","screens_Leaderboard","screens_Gameover","screens_Title","gameId","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.92dab6fe.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass Title extends Component {\n  render() {\n    return (\n      <div>\n        Welcome to Sum it Up! Rack up as many correct sums as possible in the\n        time limit. Sums made in a row result in a streak. The longer the streak\n        the higher the score multiplier! Are you ready?\n        <br />\n        <div className='footer'>\n          <button className='btn' onClick={this.props.showGameComponent}>\n            Play Game\n          </button>\n          <br />\n          <button className='btn' onClick={this.props.showLeaderboardComponent}>\n            Show Leaderboard\n          </button>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Title\n","import React, { PureComponent } from 'react'\n\nclass Number extends PureComponent {\n  handleClick = () => {\n    if (this.props.clickable) {\n      this.props.onClick(this.props.id)\n    }\n  }\n\n  render() {\n    return (\n      <div\n        className='number'\n        style={{ opacity: this.props.clickable ? 1 : 0.3 }}\n        onClick={this.handleClick}\n      >\n        {this.props.value}\n      </div>\n    )\n  }\n}\n\nexport default Number\n","import React, { Component } from 'react'\n\nclass Timer extends Component {\n  render() {\n    return (\n      <div>\n        <div className='timer-value'>Time Remaining: {this.props.value}</div>\n      </div>\n    )\n  }\n}\n\nexport default Timer\n","import React, { Component } from 'react'\nimport Number from '../Number'\n\nimport Timer from '../Timer'\nimport { sampleSize, sum } from 'lodash'\n\nconst randomNumberBetween = (min, max) => {\n  const random = Math.random()\n  return Math.floor(random * (max - min) + min)\n}\n\nclass Game extends Component {\n  constructor(props) {\n    super(props)\n    this.challengeNumbers = []\n    this.target = '?'\n  }\n\n  static bgColors = {\n    new: 'lightblue',\n    playing: 'deepskyblue',\n    over: 'lightgreen',\n    streak: 'darkorange'\n  }\n\n  static gameStatusEnum = {\n    new: 'new',\n    over: 'over',\n    playing: 'playing',\n    match: 'match',\n    miss: 'miss'\n  }\n\n  static getColorFromStatus = () => Game.bgColors[this.state.gameStatus]\n\n  state = {\n    gameStatus: Game.gameStatusEnum.new,\n    remainingSeconds: this.props.initialSeconds,\n    selectedIds: [],\n    currentSum: 0,\n    matchCount: 0,\n    streakCount: 0,\n    longestStreak: 0\n  }\n\n  componentDidMount() {\n    this.startGame()\n  }\n\n  isNumberAvailable = numberIndex =>\n    this.state.selectedIds.indexOf(numberIndex) === -1\n\n  startGame = () => {\n    this.challengeNumbers = Array.from({\n      length: this.props.challengeSize\n    }).map(() => randomNumberBetween(...this.props.challengeRange))\n\n    this.target = sum(sampleSize(this.challengeNumbers, this.props.answerSize))\n\n    this.setState(\n      {\n        gameStatus: Game.gameStatusEnum.playing,\n        selectedIds: [],\n        currentSum: 0\n      },\n      () => {\n        this.intervalId = setInterval(() => {\n          this.setState(prevState => {\n            const newRemainingSeconds = prevState.remainingSeconds - 1\n            if (newRemainingSeconds === 0) {\n              clearInterval(this.intervalId)\n              return {\n                gameStatus: Game.gameStatusEnum.over,\n                remainingSeconds: 0\n              }\n            }\n            return { remainingSeconds: newRemainingSeconds }\n          })\n        }, 1000)\n      }\n    )\n  }\n\n  selectNumber = numberIndex => {\n    this.setState(\n      prevState => {\n        if (prevState.gameStatus !== Game.gameStatusEnum.playing) {\n          return null\n        }\n        const newSelectedIds = [...prevState.selectedIds, numberIndex]\n        const currSum = newSelectedIds.reduce(\n          (acc, curr) => acc + this.challengeNumbers[curr],\n          0\n        )\n        const gameStatus = this.calcGameStatus(newSelectedIds)\n        let newStreakCount = prevState.streakCount\n        let newMatchCount = prevState.matchCount\n        let newLongestStreak = prevState.longestStreak\n\n        if (gameStatus === Game.gameStatusEnum.match) {\n          newStreakCount = prevState.streakCount += 1\n          if (newStreakCount >= prevState.longestStreak) {\n            console.log('Longest Streak Increase')\n            newLongestStreak = prevState.longestStreak += 1\n          }\n          newMatchCount = prevState.matchCount += 1\n        } else if (gameStatus === Game.gameStatusEnum.miss) {\n          newStreakCount = 0\n        }\n\n        return {\n          selectedIds: newSelectedIds,\n          gameStatus: gameStatus,\n          currentSum: currSum,\n          streakCount: newStreakCount,\n          matchCount: newMatchCount,\n          longestStreak: newLongestStreak\n        }\n      },\n      () => {\n        if (this.state.gameStatus !== Game.gameStatusEnum.playing) {\n          clearInterval(this.intervalId)\n        }\n      }\n    )\n  }\n\n  calcGameStatus = newSelectedIds => {\n    const sumSelected = newSelectedIds.reduce(\n      (acc, curr) => acc + this.challengeNumbers[curr],\n      0\n    )\n    if (newSelectedIds.length !== this.props.answerSize) {\n      return Game.gameStatusEnum.playing\n    } else {\n      console.log(`Matched: ${this.props.answerSize} numbers`)\n      if (sumSelected === this.target) {\n        console.log('Streak Increase')\n        return Game.gameStatusEnum.match\n      } else {\n        console.log('Streak Reset')\n        return Game.gameStatusEnum.miss\n      }\n    }\n  }\n\n  componentDidUpdate() {\n    const { gameStatus, longestStreak, matchCount } = this.state\n\n    if (gameStatus === Game.gameStatusEnum.over) {\n      console.log('GameOver')\n      clearInterval(this.intervalId)\n      this.props.gameOver(matchCount, longestStreak)\n    }\n\n    if (\n      [Game.gameStatusEnum.match, Game.gameStatusEnum.miss].includes(gameStatus)\n    ) {\n      console.log('Match or Miss: Start Game')\n      this.startGame()\n    }\n  }\n\n  render() {\n    const {\n      gameStatus,\n      remainingSeconds,\n      currentSum,\n      streakCount,\n      matchCount\n    } = this.state\n    let streakColor\n    if (streakCount >= 3) {\n      streakColor = Game.bgColors.streak\n    }\n    return (\n      <div className='game'>\n        <h3>\n          Combine {this.props.answerSize} numbers to match the Target Sum.\n        </h3>\n        Target Sum:\n        <div\n          className='target'\n          style={{ backgroundColor: Game.bgColors[gameStatus] }}\n        >\n          {gameStatus === Game.gameStatusEnum.new ? '?' : this.target}\n        </div>\n        Current Sum:\n        <div className='target'>{currentSum}</div>\n        <div>\n          {gameStatus === Game.gameStatusEnum.playing && (\n            <Timer value={remainingSeconds} />\n          )}\n        </div>\n        <div className='streak-count' style={{ color: streakColor }}>\n          Streak count: {streakCount}\n        </div>\n        <div className='score-count'>Score: {matchCount}</div>\n        <div className='challenge-numbers'>\n          {this.challengeNumbers.map((value, index) => (\n            <Number\n              key={index}\n              id={index}\n              value={\n                this.state.gameStatus === Game.gameStatusEnum.new ? '?' : value\n              }\n              clickable={this.isNumberAvailable(index)}\n              onClick={this.selectNumber}\n            />\n          ))}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Game\n","let lastId = 0\n\nexport default (prefix = 'id') => {\n  lastId++\n  return `${prefix}${lastId}`\n}\n","const _base = 'https://jg83vtnwdj.execute-api.us-east-2.amazonaws.com'\nconst _dev = `${_base}/Dev`\n\nconst API_URLS = {\n  DEV: {\n    ALL_SCORES_API: `${_dev}/scores`,\n    SAVE_SCORE_API: `${_dev}/scores`\n  }\n}\n\nexport default API_URLS\n","import React, { Component } from 'react'\nimport axios from 'axios'\nimport API_URLS from '../utils/apiUrls'\nimport newId from '../utils/newId'\n\nclass Leaderboard extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      userScores: {\n        data: [\n          {\n            userName: '',\n            score: 0\n          }\n        ]\n      }\n    }\n  }\n\n  componentDidMount() {\n    axios.get(API_URLS.DEV.ALL_SCORES_API).then(res => {\n      console.log(JSON.stringify(res.data))\n      const userScores = res.data\n      this.setState({ userScores })\n    })\n  }\n\n  render() {\n    const { userScores } = this.state\n    const tableRows = userScores.data\n      .filter(item => item.score > 0)\n      .map(item => {\n        return (\n          <tbody key={newId()}>\n            <tr>\n              <td key={item.userName}>{item.userName}</td>\n              <td key={item.score}>{item.score}</td>\n            </tr>\n          </tbody>\n        )\n      })\n    return (\n      <div>\n        Welcome to the Leaderboard\n        <br />\n        <table>{tableRows}</table>\n        <div className='footer'>\n          <button className='btn' onClick={this.props.showTitleComponent}>\n            Go to Menu\n          </button>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Leaderboard\n","import React, { Component } from 'react'\nimport axios from 'axios'\nimport API_URLS from '../utils/apiUrls'\n\nclass Gameover extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      userName: ''\n    }\n    this.handleUserNameChange = this.handleUserNameChange.bind(this)\n    this.handleFormSubmit = this.handleFormSubmit.bind(this)\n  }\n\n  handleUserNameChange(event) {\n    this.setState({\n      userName: event.target.value\n    })\n  }\n\n  handleFormSubmit(event) {\n    console.log(`A name was submitted: \n    UserName: ${this.state.userName}\n    TotalScore: ${this.state.finalScore}`)\n    event.preventDefault()\n    axios\n      .put(\n        API_URLS.DEV.SAVE_SCORE_API,\n        {\n          userName: this.state.userName,\n          score: this.state.finalScore\n        },\n        {\n          headers: {\n            Accept: 'application/json'\n          }\n        }\n      )\n      .then(() => {\n        this.props.showTitleComponent()\n      })\n      .catch(error => {\n        console.log(error)\n      })\n  }\n\n  componentDidMount() {\n    const { gameScore, gameStreak } = this.props\n    let finalScore\n\n    if (this.props.gameStreak > 0) {\n      finalScore = gameScore * gameStreak + 1\n    } else {\n      finalScore = gameScore + 1\n    }\n\n    this.setState({\n      finalScore: finalScore,\n      baseScore: gameScore,\n      longestStreak: gameStreak\n    })\n  }\n\n  render() {\n    const { finalScore, baseScore, longestStreak } = this.state\n    return (\n      <div>\n        Base Score: {baseScore}\n        <br />\n        Longest Steak: {longestStreak}\n        <br />\n        Total Score: {finalScore}\n        <form>\n          <label>\n            UserName:\n            <input\n              type='text'\n              value={this.state.userName}\n              onChange={this.handleUserNameChange}\n            />\n          </label>\n          <button type='submit' className='btn' onClick={this.handleFormSubmit}>\n            Submit\n          </button>\n        </form>\n        <br />\n      </div>\n    )\n  }\n}\n\nexport default Gameover\n","import React, { Component } from 'react'\nimport Title from './screens/Title'\nimport Game from './screens/Game'\nimport newId from './utils/newId'\nimport Leaderboard from './screens/Leaderboard'\nimport './App.css'\nimport Gameover from './screens/Gameover'\n\nclass App extends Component {\n  state = {\n    displayGame: false,\n    displayLeader: false,\n    displayGameOver: false,\n    answerSize: 4\n  }\n\n  showGameComponent = () => {\n    this.setState({\n      displayGame: !this.state.displayGame\n    })\n  }\n\n  showLeaderboardComponent = () => {\n    console.log('Display Leaderboard')\n    this.setState({\n      displayLeader: !this.state.displayLeader\n    })\n  }\n\n  showGameOverComponent = (score, streak) => {\n    console.log('Display Gameover/Score Screen')\n    this.setState({\n      displayGameOver: !this.state.displayGameOver,\n      displayGame: false,\n      displayLeader: false,\n      gameScore: score,\n      gameStreaks: streak\n    })\n  }\n\n  showTitleComponent = () => {\n    console.log('Display Title Screen')\n    this.setState({\n      displayGame: false,\n      displayLeader: false,\n      displayGameOver: false\n    })\n  }\n\n  render() {\n    const {\n      displayGame,\n      displayLeader,\n      displayGameOver,\n      gameScore,\n      gameStreaks\n    } = this.state\n    let screen\n    if (displayGame) {\n      screen = (\n        <Game\n          key={newId()}\n          challengeSize={6}\n          challengeRange={[2, 9]}\n          initialSeconds={60}\n          answerSize={this.state.answerSize}\n          gameOver={this.showGameOverComponent}\n        />\n      )\n    } else if (displayLeader) {\n      screen = <Leaderboard showTitleComponent={this.showTitleComponent} />\n    } else if (displayGameOver) {\n      screen = (\n        <Gameover\n          showTitleComponent={this.showTitleComponent}\n          showLeaderboardComponent={this.showLeaderboardComponent}\n          gameScore={gameScore}\n          gameStreak={gameStreaks}\n        />\n      )\n    } else {\n      screen = (\n        <Title\n          gameId={newId()}\n          showGameComponent={this.showGameComponent}\n          showLeaderboardComponent={this.showLeaderboardComponent}\n        />\n      )\n    }\n\n    return <div>{screen}</div>\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}