{"version":3,"sources":["screens/Title.js","Number.js","screens/Rules.js","Timer.js","screens/Game.js","utils/newId.js","utils/apiUrls.js","screens/Leaderboard.js","screens/Gameover.js","App.js","serviceWorker.js","index.js"],"names":["Title","react_default","a","createElement","className","onClick","this","props","showGameComponent","showLeaderboardComponent","Component","Number","handleClick","_this","clickable","id","style","opacity","value","PureComponent","Rules","answerSize","startGame","Timer","randomNumberBetween","min","max","random","Math","floor","Game","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","gameStatus","gameStatusEnum","new","remainingSeconds","initialSeconds","selectedIds","currentSum","matchCount","streakCount","longestStreak","isNumberAvailable","numberIndex","indexOf","setState","showRules","challengeNumbers","Array","from","length","challengeSize","map","apply","toConsumableArray","challengeRange","target","sum","sampleSize","playing","intervalId","setInterval","prevState","newRemainingSeconds","clearInterval","over","selectNumber","newSelectedIds","concat","currSum","reduce","acc","curr","calcGameStatus","newStreakCount","newMatchCount","newLongestStreak","match","console","log","miss","sumSelected","_this$state","gameOver","includes","streakColor","_this2","_this$state2","bgColors","streak","screens_Rules","src_Timer","color","backgroundColor","index","src_Number","key","getColorFromStatus","lastId","newId","prefix","arguments","undefined","_dev","API_URLS","DEV","ALL_SCORES_API","SAVE_SCORE_API","Leaderboard","userScores","data","userName","score","axios","get","then","res","JSON","stringify","userA","userB","tableRows","filter","item","showTitleComponent","Gameover","handleUserNameChange","bind","assertThisInitialized","handleFormSubmit","event","finalScore","preventDefault","put","headers","Accept","catch","error","_this$props","gameScore","gameStreak","baseScore","type","onChange","App","displayGame","displayLeader","displayGameOver","showGameOverComponent","gameStreaks","screen","screens_Game","screens_Leaderboard","gameId","screens_Gameover","screens_Title","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.74982310.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass Title extends Component {\n  render() {\n    return (\n      <div>\n        <div className='title'>Welcome to Sum it Up!</div>\n        <div className='menu-buttons'>\n          <button className='btn' onClick={this.props.showGameComponent}>\n            Play Game\n          </button>\n          <button className='btn' onClick={this.props.showLeaderboardComponent}>\n            Leaderboard\n          </button>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Title\n","import React, { PureComponent } from 'react'\n\nclass Number extends PureComponent {\n  handleClick = () => {\n    if (this.props.clickable) {\n      this.props.onClick(this.props.id)\n    }\n  }\n\n  render() {\n    return (\n      <div\n        className='number'\n        style={{ opacity: this.props.clickable ? 1 : 0.3 }}\n        onClick={this.handleClick}\n      >\n        {this.props.value}\n      </div>\n    )\n  }\n}\n\nexport default Number\n","import React, { Component } from 'react'\n\nclass Rules extends Component {\n  render() {\n    return (\n      <div>\n        <div className='rules'>\n          RULES:\n          <br />\n          Select up to {this.props.answerSize} numbers to make a sum.\n          <br />\n          Sums made in a row result in a streak.\n          <br />\n          The longer the streak the higher the score!\n          <br />\n        </div>\n        <button className='rules-start' onClick={this.props.startGame}>\n          Start\n        </button>\n      </div>\n    )\n  }\n}\n\nexport default Rules\n","import React, { Component } from 'react'\n\nclass Timer extends Component {\n  render() {\n    return (\n      <div>\n        <div className='timer-value'> {this.props.value} </div>\n      </div>\n    )\n  }\n}\n\nexport default Timer\n","import React, { Component } from 'react'\nimport Number from '../Number'\nimport Rules from './Rules'\nimport Timer from '../Timer'\nimport { sampleSize, sum } from 'lodash'\n\nconst randomNumberBetween = (min, max) => {\n  const random = Math.random()\n  return Math.floor(random * (max - min) + min)\n}\n\nclass Game extends Component {\n  constructor(props) {\n    super(props)\n    this.challengeNumbers = []\n    this.target = '?'\n  }\n\n  static bgColors = {\n    new: 'lightblue',\n    playing: 'deepskyblue',\n    over: 'lightgreen',\n    streak: 'darkorange'\n  }\n\n  static gameStatusEnum = {\n    new: 'new',\n    over: 'over',\n    playing: 'playing',\n    match: 'match',\n    miss: 'miss'\n  }\n\n  static getColorFromStatus = () => Game.bgColors[this.state.gameStatus]\n\n  state = {\n    gameStatus: Game.gameStatusEnum.new,\n    remainingSeconds: this.props.initialSeconds,\n    selectedIds: [],\n    currentSum: 0,\n    matchCount: 0,\n    streakCount: 0,\n    longestStreak: 0\n  }\n\n  componentDidMount() {\n    // this.startGame()\n    this.setState({ showRules: true })\n  }\n\n  isNumberAvailable = numberIndex =>\n    this.state.selectedIds.indexOf(numberIndex) === -1\n\n  startGame = () => {\n    this.setState({\n      showRules: false\n    })\n    this.challengeNumbers = Array.from({\n      length: this.props.challengeSize\n    }).map(() => randomNumberBetween(...this.props.challengeRange))\n\n    this.target = sum(sampleSize(this.challengeNumbers, this.props.answerSize))\n\n    this.setState(\n      {\n        gameStatus: Game.gameStatusEnum.playing,\n        selectedIds: [],\n        currentSum: 0\n      },\n      () => {\n        this.intervalId = setInterval(() => {\n          this.setState(prevState => {\n            const newRemainingSeconds = prevState.remainingSeconds - 1\n            if (newRemainingSeconds === 0) {\n              clearInterval(this.intervalId)\n              return {\n                gameStatus: Game.gameStatusEnum.over,\n                remainingSeconds: 0\n              }\n            }\n            return { remainingSeconds: newRemainingSeconds }\n          })\n        }, 1000)\n      }\n    )\n  }\n\n  selectNumber = numberIndex => {\n    this.setState(\n      prevState => {\n        if (prevState.gameStatus !== Game.gameStatusEnum.playing) {\n          return null\n        }\n        const newSelectedIds = [...prevState.selectedIds, numberIndex]\n        const currSum = newSelectedIds.reduce(\n          (acc, curr) => acc + this.challengeNumbers[curr],\n          0\n        )\n        const gameStatus = this.calcGameStatus(newSelectedIds)\n        let newStreakCount = prevState.streakCount\n        let newMatchCount = prevState.matchCount\n        let newLongestStreak = prevState.longestStreak\n\n        if (gameStatus === Game.gameStatusEnum.match) {\n          newStreakCount = prevState.streakCount += 1\n          if (newStreakCount >= prevState.longestStreak) {\n            console.log('Longest Streak Increase')\n            newLongestStreak = prevState.longestStreak += 1\n          }\n          newMatchCount = prevState.matchCount += 1\n        } else if (gameStatus === Game.gameStatusEnum.miss) {\n          newStreakCount = 0\n        }\n\n        return {\n          selectedIds: newSelectedIds,\n          gameStatus: gameStatus,\n          currentSum: currSum,\n          streakCount: newStreakCount,\n          matchCount: newMatchCount,\n          longestStreak: newLongestStreak\n        }\n      },\n      () => {\n        if (this.state.gameStatus !== Game.gameStatusEnum.playing) {\n          clearInterval(this.intervalId)\n        }\n      }\n    )\n  }\n\n  calcGameStatus = newSelectedIds => {\n    const sumSelected = newSelectedIds.reduce(\n      (acc, curr) => acc + this.challengeNumbers[curr],\n      0\n    )\n    if (newSelectedIds.length !== this.props.answerSize) {\n      if (sumSelected === this.target) {\n        console.log('Streak Increase')\n        return Game.gameStatusEnum.match\n      } else {\n        return Game.gameStatusEnum.playing\n      }\n    } else {\n      console.log(`Matched: ${this.props.answerSize} numbers`)\n      if (sumSelected === this.target) {\n        console.log('Streak Increase')\n        return Game.gameStatusEnum.match\n      } else {\n        console.log('Streak Reset')\n        return Game.gameStatusEnum.miss\n      }\n    }\n  }\n\n  componentDidUpdate() {\n    const { gameStatus, longestStreak, matchCount } = this.state\n\n    if (gameStatus === Game.gameStatusEnum.over) {\n      console.log('GameOver')\n      clearInterval(this.intervalId)\n      this.props.gameOver(matchCount, longestStreak)\n    }\n\n    if (\n      [Game.gameStatusEnum.match, Game.gameStatusEnum.miss].includes(gameStatus)\n    ) {\n      console.log('Match or Miss: Start Game')\n      this.startGame()\n    }\n  }\n\n  render() {\n    const {\n      gameStatus,\n      remainingSeconds,\n      currentSum,\n      streakCount,\n      matchCount,\n      showRules\n    } = this.state\n    let streakColor\n    if (streakCount >= 3) {\n      streakColor = Game.bgColors.streak\n    }\n    return (\n      <div>\n        {showRules && (\n          <Rules\n            answerSize={this.props.answerSize}\n            startGame={this.startGame}\n          />\n        )}\n        {!showRules && (\n          <div className='game'>\n            <div className='header'>\n              <div className='score-count'>Score: {matchCount}</div>\n\n              {gameStatus === Game.gameStatusEnum.playing && (\n                <Timer value={remainingSeconds} />\n              )}\n\n              <div className='streak-count' style={{ color: streakColor }}>\n                Streak: {streakCount}\n              </div>\n            </div>\n            Target Sum:\n            <div\n              className='target'\n              style={{ backgroundColor: Game.bgColors[gameStatus] }}\n            >\n              {gameStatus === Game.gameStatusEnum.new ? '?' : this.target}\n            </div>\n            Current Sum:\n            <div className='target'>{currentSum}</div>\n            <div className='challenge-numbers'>\n              {this.challengeNumbers.map((value, index) => (\n                <Number\n                  key={index}\n                  id={index}\n                  value={\n                    this.state.gameStatus === Game.gameStatusEnum.new\n                      ? '?'\n                      : value\n                  }\n                  clickable={this.isNumberAvailable(index)}\n                  onClick={this.selectNumber}\n                />\n              ))}\n            </div>\n          </div>\n        )}\n      </div>\n    )\n  }\n}\n\nexport default Game\n","let lastId = 0\n\nexport default (prefix = 'id') => {\n  lastId++\n  return `${prefix}${lastId}`\n}\n","const _base = 'https://jg83vtnwdj.execute-api.us-east-2.amazonaws.com'\nconst _dev = `${_base}/Dev`\n\nconst API_URLS = {\n  DEV: {\n    ALL_SCORES_API: `${_dev}/scores`,\n    SAVE_SCORE_API: `${_dev}/scores`\n  }\n}\n\nexport default API_URLS\n","import React, { Component } from 'react'\nimport axios from 'axios'\nimport API_URLS from '../utils/apiUrls'\nimport newId from '../utils/newId'\n\nclass Leaderboard extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      userScores: {\n        data: [\n          {\n            userName: '',\n            score: 0\n          }\n        ]\n      }\n    }\n  }\n\n  componentDidMount() {\n    axios.get(API_URLS.DEV.ALL_SCORES_API).then(res => {\n      console.log(JSON.stringify(res.data))\n      const userScores = res.data\n      this.setState({ userScores })\n    })\n  }\n\n  compare(userA, userB) {\n    if (userA.score < userB.score) return -1\n    if (userA.score > userB.score) return 1\n    return 0\n  }\n\n  render() {\n    const { userScores } = this.state\n    const tableRows = userScores.data\n      .filter(item => item.score > 0)\n      .map(item => {\n        return (\n          <tbody key={newId()}>\n            <tr>\n              <td key={item.userName}>{item.userName}</td>\n              <td key={item.score}>{item.score}</td>\n            </tr>\n          </tbody>\n        )\n      })\n    return (\n      <div>\n        <div className='header'>Sum It Up Leaderboard</div>\n        <br />\n        <table>{tableRows}</table>\n        <div className='footer'>\n          <button className='btn' onClick={this.props.showTitleComponent}>\n            Go to Menu\n          </button>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Leaderboard\n","import React, { Component } from 'react'\nimport axios from 'axios'\nimport API_URLS from '../utils/apiUrls'\n\nclass Gameover extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      userName: ''\n    }\n    this.handleUserNameChange = this.handleUserNameChange.bind(this)\n    this.handleFormSubmit = this.handleFormSubmit.bind(this)\n  }\n\n  handleUserNameChange(event) {\n    this.setState({\n      userName: event.target.value\n    })\n  }\n\n  handleFormSubmit(event) {\n    console.log(`A name was submitted: \n    UserName: ${this.state.userName}\n    TotalScore: ${this.state.finalScore}`)\n    event.preventDefault()\n    axios\n      .put(\n        API_URLS.DEV.SAVE_SCORE_API,\n        {\n          userName: this.state.userName,\n          score: this.state.finalScore\n        },\n        {\n          headers: {\n            Accept: 'application/json'\n          }\n        }\n      )\n      .then(() => {\n        this.props.showTitleComponent()\n      })\n      .catch(error => {\n        console.log(error)\n      })\n  }\n\n  componentDidMount() {\n    const { gameScore, gameStreak } = this.props\n    let finalScore\n\n    if (this.props.gameStreak > 0) {\n      finalScore = gameScore * gameStreak + 1\n    } else {\n      finalScore = gameScore + 1\n    }\n\n    this.setState({\n      finalScore: finalScore,\n      baseScore: gameScore,\n      longestStreak: gameStreak\n    })\n  }\n\n  render() {\n    const { finalScore, baseScore, longestStreak } = this.state\n    return (\n      <div>\n        Base Score: {baseScore}\n        <br />\n        Longest Steak: {longestStreak}\n        <br />\n        Total Score: {finalScore}\n        <form>\n          <label>\n            UserName:\n            <input\n              type='text'\n              value={this.state.userName}\n              onChange={this.handleUserNameChange}\n            />\n          </label>\n          <button type='submit' className='btn' onClick={this.handleFormSubmit}>\n            Submit\n          </button>\n        </form>\n        <br />\n      </div>\n    )\n  }\n}\n\nexport default Gameover\n","import React, { Component } from 'react'\nimport Title from './screens/Title'\nimport Game from './screens/Game'\nimport newId from './utils/newId'\nimport Leaderboard from './screens/Leaderboard'\nimport './App.css'\nimport Gameover from './screens/Gameover'\n\nclass App extends Component {\n  state = {\n    displayGame: false,\n    displayLeader: false,\n    displayGameOver: false,\n    answerSize: 4\n  }\n\n  showGameComponent = () => {\n    this.setState({\n      displayGame: !this.state.displayGame\n    })\n  }\n\n  showLeaderboardComponent = () => {\n    console.log('Display Leaderboard')\n    this.setState({\n      displayLeader: !this.state.displayLeader\n    })\n  }\n\n  showGameOverComponent = (score, streak) => {\n    console.log('Display Gameover/Score Screen')\n    this.setState({\n      displayGameOver: !this.state.displayGameOver,\n      displayGame: false,\n      displayLeader: false,\n      gameScore: score,\n      gameStreaks: streak\n    })\n  }\n\n  showTitleComponent = () => {\n    console.log('Display Title Screen')\n    this.setState({\n      displayGame: false,\n      displayLeader: false,\n      displayGameOver: false\n    })\n  }\n\n  render() {\n    const {\n      displayGame,\n      displayLeader,\n      displayGameOver,\n      gameScore,\n      gameStreaks\n    } = this.state\n    let screen\n    if (displayGame) {\n      screen = (\n        <Game\n          key={newId()}\n          challengeSize={6}\n          challengeRange={[2, 9]}\n          initialSeconds={60}\n          answerSize={this.state.answerSize}\n          gameOver={this.showGameOverComponent}\n        />\n      )\n    } else if (displayLeader) {\n      screen = (\n        <Leaderboard\n          gameId={newId()}\n          showTitleComponent={this.showTitleComponent}\n        />\n      )\n    } else if (displayGameOver) {\n      screen = (\n        <Gameover\n          gameId={newId()}\n          showTitleComponent={this.showTitleComponent}\n          showLeaderboardComponent={this.showLeaderboardComponent}\n          gameScore={gameScore}\n          gameStreak={gameStreaks}\n        />\n      )\n    } else {\n      screen = (\n        <Title\n          gameId={newId()}\n          answerSize={this.state.answerSize}\n          showGameComponent={this.showGameComponent}\n          showLeaderboardComponent={this.showLeaderboardComponent}\n        />\n      )\n    }\n\n    return <div>{screen}</div>\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}