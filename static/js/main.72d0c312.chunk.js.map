{"version":3,"sources":["screens/Title.js","Number.js","Timer.js","screens/Game.js","utils/newId.js","utils/apiUrls.js","screens/Leaderboard.js","screens/Gameover.js","App.js","serviceWorker.js","index.js"],"names":["Title","react_default","a","createElement","className","this","props","answerSize","onClick","showGameComponent","showLeaderboardComponent","Component","Number","handleClick","_this","clickable","id","style","opacity","value","PureComponent","Timer","randomNumberBetween","min","max","random","Math","floor","Game","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","gameStatus","gameStatusEnum","new","remainingSeconds","initialSeconds","selectedIds","currentSum","matchCount","streakCount","longestStreak","isNumberAvailable","numberIndex","indexOf","startGame","challengeNumbers","Array","from","length","challengeSize","map","apply","toConsumableArray","challengeRange","target","sum","sampleSize","setState","playing","intervalId","setInterval","prevState","newRemainingSeconds","clearInterval","over","selectNumber","newSelectedIds","concat","currSum","reduce","acc","curr","calcGameStatus","newStreakCount","newMatchCount","newLongestStreak","match","console","log","miss","sumSelected","_this$state","gameOver","includes","streakColor","_this2","_this$state2","bgColors","streak","src_Timer","color","backgroundColor","index","src_Number","key","getColorFromStatus","lastId","newId","prefix","arguments","undefined","_dev","API_URLS","DEV","ALL_SCORES_API","SAVE_SCORE_API","Leaderboard","userScores","data","userName","score","axios","get","then","res","JSON","stringify","tableRows","filter","item","showTitleComponent","Gameover","handleUserNameChange","bind","assertThisInitialized","handleFormSubmit","event","finalScore","preventDefault","put","headers","Accept","catch","error","_this$props","gameScore","gameStreak","baseScore","type","onChange","App","displayGame","displayLeader","displayGameOver","showGameOverComponent","gameStreaks","screen","screens_Game","screens_Leaderboard","gameId","screens_Gameover","screens_Title","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.72d0c312.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass Title extends Component {\n  render() {\n    return (\n      <div>\n        <div className='title'>\n          Welcome to Sum it Up!\n          <br />\n          RULES:\n          <br />\n          Select up to {this.props.answerSize} numbers to make a sum.\n          <br />\n          Sums made in a row result in a streak.\n          <br />\n          The longer the streak the higher the score!\n          <br />\n        </div>\n        <div className='footer'>\n          <button className='btn' onClick={this.props.showGameComponent}>\n            Play Game\n          </button>\n          <button className='btn' onClick={this.props.showLeaderboardComponent}>\n            Show Leaderboard\n          </button>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Title\n","import React, { PureComponent } from 'react'\n\nclass Number extends PureComponent {\n  handleClick = () => {\n    if (this.props.clickable) {\n      this.props.onClick(this.props.id)\n    }\n  }\n\n  render() {\n    return (\n      <div\n        className='number'\n        style={{ opacity: this.props.clickable ? 1 : 0.3 }}\n        onClick={this.handleClick}\n      >\n        {this.props.value}\n      </div>\n    )\n  }\n}\n\nexport default Number\n","import React, { Component } from 'react'\n\nclass Timer extends Component {\n  render() {\n    return (\n      <div>\n        <div className='timer-value'> {this.props.value} </div>\n      </div>\n    )\n  }\n}\n\nexport default Timer\n","import React, { Component } from 'react'\nimport Number from '../Number'\n\nimport Timer from '../Timer'\nimport { sampleSize, sum } from 'lodash'\n\nconst randomNumberBetween = (min, max) => {\n  const random = Math.random()\n  return Math.floor(random * (max - min) + min)\n}\n\nclass Game extends Component {\n  constructor(props) {\n    super(props)\n    this.challengeNumbers = []\n    this.target = '?'\n  }\n\n  static bgColors = {\n    new: 'lightblue',\n    playing: 'deepskyblue',\n    over: 'lightgreen',\n    streak: 'darkorange'\n  }\n\n  static gameStatusEnum = {\n    new: 'new',\n    over: 'over',\n    playing: 'playing',\n    match: 'match',\n    miss: 'miss'\n  }\n\n  static getColorFromStatus = () => Game.bgColors[this.state.gameStatus]\n\n  state = {\n    gameStatus: Game.gameStatusEnum.new,\n    remainingSeconds: this.props.initialSeconds,\n    selectedIds: [],\n    currentSum: 0,\n    matchCount: 0,\n    streakCount: 0,\n    longestStreak: 0\n  }\n\n  componentDidMount() {\n    this.startGame()\n  }\n\n  isNumberAvailable = numberIndex =>\n    this.state.selectedIds.indexOf(numberIndex) === -1\n\n  startGame = () => {\n    this.challengeNumbers = Array.from({\n      length: this.props.challengeSize\n    }).map(() => randomNumberBetween(...this.props.challengeRange))\n\n    this.target = sum(sampleSize(this.challengeNumbers, this.props.answerSize))\n\n    this.setState(\n      {\n        gameStatus: Game.gameStatusEnum.playing,\n        selectedIds: [],\n        currentSum: 0\n      },\n      () => {\n        this.intervalId = setInterval(() => {\n          this.setState(prevState => {\n            const newRemainingSeconds = prevState.remainingSeconds - 1\n            if (newRemainingSeconds === 0) {\n              clearInterval(this.intervalId)\n              return {\n                gameStatus: Game.gameStatusEnum.over,\n                remainingSeconds: 0\n              }\n            }\n            return { remainingSeconds: newRemainingSeconds }\n          })\n        }, 1000)\n      }\n    )\n  }\n\n  selectNumber = numberIndex => {\n    this.setState(\n      prevState => {\n        if (prevState.gameStatus !== Game.gameStatusEnum.playing) {\n          return null\n        }\n        const newSelectedIds = [...prevState.selectedIds, numberIndex]\n        const currSum = newSelectedIds.reduce(\n          (acc, curr) => acc + this.challengeNumbers[curr],\n          0\n        )\n        const gameStatus = this.calcGameStatus(newSelectedIds)\n        let newStreakCount = prevState.streakCount\n        let newMatchCount = prevState.matchCount\n        let newLongestStreak = prevState.longestStreak\n\n        if (gameStatus === Game.gameStatusEnum.match) {\n          newStreakCount = prevState.streakCount += 1\n          if (newStreakCount >= prevState.longestStreak) {\n            console.log('Longest Streak Increase')\n            newLongestStreak = prevState.longestStreak += 1\n          }\n          newMatchCount = prevState.matchCount += 1\n        } else if (gameStatus === Game.gameStatusEnum.miss) {\n          newStreakCount = 0\n        }\n\n        return {\n          selectedIds: newSelectedIds,\n          gameStatus: gameStatus,\n          currentSum: currSum,\n          streakCount: newStreakCount,\n          matchCount: newMatchCount,\n          longestStreak: newLongestStreak\n        }\n      },\n      () => {\n        if (this.state.gameStatus !== Game.gameStatusEnum.playing) {\n          clearInterval(this.intervalId)\n        }\n      }\n    )\n  }\n\n  calcGameStatus = newSelectedIds => {\n    const sumSelected = newSelectedIds.reduce(\n      (acc, curr) => acc + this.challengeNumbers[curr],\n      0\n    )\n    if (newSelectedIds.length !== this.props.answerSize) {\n      if (sumSelected === this.target) {\n        console.log('Streak Increase')\n        return Game.gameStatusEnum.match\n      } else {\n        return Game.gameStatusEnum.playing\n      }\n    } else {\n      console.log(`Matched: ${this.props.answerSize} numbers`)\n      if (sumSelected === this.target) {\n        console.log('Streak Increase')\n        return Game.gameStatusEnum.match\n      } else {\n        console.log('Streak Reset')\n        return Game.gameStatusEnum.miss\n      }\n    }\n  }\n\n  componentDidUpdate() {\n    const { gameStatus, longestStreak, matchCount } = this.state\n\n    if (gameStatus === Game.gameStatusEnum.over) {\n      console.log('GameOver')\n      clearInterval(this.intervalId)\n      this.props.gameOver(matchCount, longestStreak)\n    }\n\n    if (\n      [Game.gameStatusEnum.match, Game.gameStatusEnum.miss].includes(gameStatus)\n    ) {\n      console.log('Match or Miss: Start Game')\n      this.startGame()\n    }\n  }\n\n  render() {\n    const {\n      gameStatus,\n      remainingSeconds,\n      currentSum,\n      streakCount,\n      matchCount\n    } = this.state\n    let streakColor\n    if (streakCount >= 3) {\n      streakColor = Game.bgColors.streak\n    }\n    return (\n      <div className='game'>\n        <div className='header'>\n          <div className='score-count'>Score: {matchCount}</div>\n\n          {gameStatus === Game.gameStatusEnum.playing && (\n            <Timer value={remainingSeconds} />\n          )}\n\n          <div className='streak-count' style={{ color: streakColor }}>\n            Streak: {streakCount}\n          </div>\n        </div>\n        Target Sum:\n        <div\n          className='target'\n          style={{ backgroundColor: Game.bgColors[gameStatus] }}\n        >\n          {gameStatus === Game.gameStatusEnum.new ? '?' : this.target}\n        </div>\n        Current Sum:\n        <div className='target'>{currentSum}</div>\n        <div className='challenge-numbers'>\n          {this.challengeNumbers.map((value, index) => (\n            <Number\n              key={index}\n              id={index}\n              value={\n                this.state.gameStatus === Game.gameStatusEnum.new ? '?' : value\n              }\n              clickable={this.isNumberAvailable(index)}\n              onClick={this.selectNumber}\n            />\n          ))}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Game\n","let lastId = 0\n\nexport default (prefix = 'id') => {\n  lastId++\n  return `${prefix}${lastId}`\n}\n","const _base = 'https://jg83vtnwdj.execute-api.us-east-2.amazonaws.com'\nconst _dev = `${_base}/Dev`\n\nconst API_URLS = {\n  DEV: {\n    ALL_SCORES_API: `${_dev}/scores`,\n    SAVE_SCORE_API: `${_dev}/scores`\n  }\n}\n\nexport default API_URLS\n","import React, { Component } from 'react'\nimport axios from 'axios'\nimport API_URLS from '../utils/apiUrls'\nimport newId from '../utils/newId'\n\nclass Leaderboard extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      userScores: {\n        data: [\n          {\n            userName: '',\n            score: 0\n          }\n        ]\n      }\n    }\n  }\n\n  componentDidMount() {\n    axios.get(API_URLS.DEV.ALL_SCORES_API).then(res => {\n      console.log(JSON.stringify(res.data))\n      const userScores = res.data\n      this.setState({ userScores })\n    })\n  }\n\n  render() {\n    const { userScores } = this.state\n    const tableRows = userScores.data\n      .filter(item => item.score > 0)\n      .map(item => {\n        return (\n          <tbody key={newId()}>\n            <tr>\n              <td key={item.userName}>{item.userName}</td>\n              <td key={item.score}>{item.score}</td>\n            </tr>\n          </tbody>\n        )\n      })\n    return (\n      <div>\n        Welcome to the Leaderboard\n        <br />\n        <table>{tableRows}</table>\n        <div className='footer'>\n          <button className='btn' onClick={this.props.showTitleComponent}>\n            Go to Menu\n          </button>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Leaderboard\n","import React, { Component } from 'react'\nimport axios from 'axios'\nimport API_URLS from '../utils/apiUrls'\n\nclass Gameover extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      userName: ''\n    }\n    this.handleUserNameChange = this.handleUserNameChange.bind(this)\n    this.handleFormSubmit = this.handleFormSubmit.bind(this)\n  }\n\n  handleUserNameChange(event) {\n    this.setState({\n      userName: event.target.value\n    })\n  }\n\n  handleFormSubmit(event) {\n    console.log(`A name was submitted: \n    UserName: ${this.state.userName}\n    TotalScore: ${this.state.finalScore}`)\n    event.preventDefault()\n    axios\n      .put(\n        API_URLS.DEV.SAVE_SCORE_API,\n        {\n          userName: this.state.userName,\n          score: this.state.finalScore\n        },\n        {\n          headers: {\n            Accept: 'application/json'\n          }\n        }\n      )\n      .then(() => {\n        this.props.showTitleComponent()\n      })\n      .catch(error => {\n        console.log(error)\n      })\n  }\n\n  componentDidMount() {\n    const { gameScore, gameStreak } = this.props\n    let finalScore\n\n    if (this.props.gameStreak > 0) {\n      finalScore = gameScore * gameStreak + 1\n    } else {\n      finalScore = gameScore + 1\n    }\n\n    this.setState({\n      finalScore: finalScore,\n      baseScore: gameScore,\n      longestStreak: gameStreak\n    })\n  }\n\n  render() {\n    const { finalScore, baseScore, longestStreak } = this.state\n    return (\n      <div>\n        Base Score: {baseScore}\n        <br />\n        Longest Steak: {longestStreak}\n        <br />\n        Total Score: {finalScore}\n        <form>\n          <label>\n            UserName:\n            <input\n              type='text'\n              value={this.state.userName}\n              onChange={this.handleUserNameChange}\n            />\n          </label>\n          <button type='submit' className='btn' onClick={this.handleFormSubmit}>\n            Submit\n          </button>\n        </form>\n        <br />\n      </div>\n    )\n  }\n}\n\nexport default Gameover\n","import React, { Component } from 'react'\nimport Title from './screens/Title'\nimport Game from './screens/Game'\nimport newId from './utils/newId'\nimport Leaderboard from './screens/Leaderboard'\nimport './App.css'\nimport Gameover from './screens/Gameover'\n\nclass App extends Component {\n  state = {\n    displayGame: false,\n    displayLeader: false,\n    displayGameOver: false,\n    answerSize: 4\n  }\n\n  showGameComponent = () => {\n    this.setState({\n      displayGame: !this.state.displayGame\n    })\n  }\n\n  showLeaderboardComponent = () => {\n    console.log('Display Leaderboard')\n    this.setState({\n      displayLeader: !this.state.displayLeader\n    })\n  }\n\n  showGameOverComponent = (score, streak) => {\n    console.log('Display Gameover/Score Screen')\n    this.setState({\n      displayGameOver: !this.state.displayGameOver,\n      displayGame: false,\n      displayLeader: false,\n      gameScore: score,\n      gameStreaks: streak\n    })\n  }\n\n  showTitleComponent = () => {\n    console.log('Display Title Screen')\n    this.setState({\n      displayGame: false,\n      displayLeader: false,\n      displayGameOver: false\n    })\n  }\n\n  render() {\n    const {\n      displayGame,\n      displayLeader,\n      displayGameOver,\n      gameScore,\n      gameStreaks\n    } = this.state\n    let screen\n    if (displayGame) {\n      screen = (\n        <Game\n          key={newId()}\n          challengeSize={6}\n          challengeRange={[2, 9]}\n          initialSeconds={60}\n          answerSize={this.state.answerSize}\n          gameOver={this.showGameOverComponent}\n        />\n      )\n    } else if (displayLeader) {\n      screen = (\n        <Leaderboard\n          gameId={newId()}\n          showTitleComponent={this.showTitleComponent}\n        />\n      )\n    } else if (displayGameOver) {\n      screen = (\n        <Gameover\n          gameId={newId()}\n          showTitleComponent={this.showTitleComponent}\n          showLeaderboardComponent={this.showLeaderboardComponent}\n          gameScore={gameScore}\n          gameStreak={gameStreaks}\n        />\n      )\n    } else {\n      screen = (\n        <Title\n          gameId={newId()}\n          answerSize={this.state.answerSize}\n          showGameComponent={this.showGameComponent}\n          showLeaderboardComponent={this.showLeaderboardComponent}\n        />\n      )\n    }\n\n    return <div>{screen}</div>\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}